This is a straight-forward problem.

If we observe the given picture, we can see that there are four state of decreasing the value of matrix. We can easily build the matrix by giving four different conditions.

Firstly define all the value of 2D array named mat to 0. Create a pair array named ans for storing the index of every value of matrix.

Define l = 1, r = n, state = 1, x = n * n;

Then run a loop while ( x != 0 ). In this loop,  give four different state for building the desired matrix by running another loop inside the while loop. 

  •	If the value of state is 1, run a loop l to r. if mat[l][i] = 0, replace mat[l][i] by x. Define ans[x].first = l, ans[x].second = i. Decrease x by 1.

  •	Else if the value of state is 2, run a loop l to r. if mat[i][r] = 0, replace mat[i][r] by x. Define ans[x].first = i, ans[x].second = r. Decrease x by 1.

  •	Else if the value of state is 3, run a loop r to l. if mat[r][i] = 0, replace mat[r][i] by x. Define ans[x].first = r, ans[x].second = i. Decrease x by 1.

  •	Else if the value of state is 4, run a loop r to l. if mat[i][l] = 0, replace mat[i][l] by x. Define ans[x].first = i, ans[x].second = l. Decrease x by 1.

Every time after the nested loop will be finished, increase the value of state by 1. If sometime value of state will more than 4, we make it 1 again & increase l by 1 & decrease r by 1.

For each query, for given value m, print ans[m].first & ans[m].second in correct format.


